/**
 * Loader generated by glad {{ gen_info.version }} on {{ gen_info.when }}
 *
 * Generator: {{ gen_info.generator_name }}
 * Specification: {{ gen_info.specification }}
 * Extensions: {{ gen_info.extensions|length }}
 *
 * APIs:
{% for info in gen_info.info %}
 *  - {{ info }}
{% endfor %}
 *
 * Options:
{% for name, value in gen_info.options.items() %}
 *  - {{ name }} = {{ value }}
{% endfor %}
 *
 * Commandline:
 *    {{ gen_info.commandline }}
 *
 * Online:
 *    {{ gen_info.online }}
 *
 */

using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace OpenGL
{
    public static unsafe class GL
    {
        private static Func<string, IntPtr> s_getProcAddress;

        private const CallingConvention CallConv = CallingConvention.StdCall;

        {% for command in feature_set.commands %}
        [UnmanagedFunctionPointer(CallConv)]
        private delegate void {{ command.name }}_t({{ command|params }});
        private static {{ command.name }}_t p_{{ command.name }};
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void {{ command.name|no_prefix }}({{ command|params }}) => p_{{ command.name }}({{ command|params('names') }});

        {% endfor %}

        public static void Load(Func<string, IntPtr> getProcAddress)
        {
            s_getProcAddress = getProcAddress;

            {% for command in feature_set.commands %}
            LoadFunction("gl{{ command.name|no_prefix }}", out p_gl{{ command.name|no_prefix }});
            {% endfor %}
        }

        private static void LoadFunction<T>(string name, out T field)
        {
            IntPtr funcPtr = s_getProcAddress(name);
            if (funcPtr != IntPtr.Zero)
            {
                field = Marshal.GetDelegateForFunctionPointer<T>(funcPtr);
            }
            else
            {
                field = default(T);
            }
        }
    }

    public enum GLEnum : uint
    {
        {% for enum in feature_set.enums %}
        {{ enum.name }} = {{ enum|enum_value }},
        {% endfor %}
    }
}
